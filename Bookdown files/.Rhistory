}
row[["type[FisherTest]"]] <- gettext("Fisher's exact test ")
if (ready) {
if ( ! identical(dim(counts.matrix),as.integer(c(2,2)))) {
row[["value[FisherTest]"]] <- NaN
row[["low[FisherTest]"]]   <- ""
row[["up[FisherTest]"]]    <- ""
row[["p[FisherTest]"]]     <- ""
} else {
chi.result <- try({
conf.level  <- options$oddsRatioConfidenceIntervalInterval
chi.result  <- stats::fisher.test(counts.matrix, conf.level = conf.level,
alternative = options$oddsRatioHypothesis)
OR          <- unname(chi.result$estimate)
logOR       <- log(OR)
log.CI.low  <- log(chi.result$conf.int[1])
log.CI.high <- log(chi.result$conf.int[2])
p           <- chi.result$p.value
})
if (isTryError(chi.result))
row[["value[FisherTest]"]] <- NaN
else if (is.na(chi.result))
row[["value[FisherTest]"]] <- NaN
else {
row[["value[FisherTest]"]] <- logOR
row[["low[FisherTest]"]]   <- log.CI.low
row[["up[FisherTest]"]]    <- log.CI.high
row[["p[FisherTest]"]]     <- p
}
row[["value[FisherTest]"]] <- logOR
row[["low[FisherTest]"]]   <- log.CI.low
row[["up[FisherTest]"]]    <- log.CI.high
row[["p[FisherTest]"]]     <- p
}
}
row <- .crossTabLayerNames(row, group)
odds.ratio.rows[[length(odds.ratio.rows) + 1]] <- row
}
return(list(rows = odds.ratio.rows, rownames = row.rownames))
}
.crossTabNominalRows <- function(analysisContainer, var.name, groupList, options, ready) {
nominal.rows   <- list()
group.matrices <- groupList$group.matrices
groups         <- groupList$groups
row.rownames   <- .crossTabRowName(groups)
for (g in seq_along(group.matrices)) {
counts.matrix <- group.matrices[[g]]
if (!is.null(groups)) group <- groups[[g]]
else                  group <- NULL
row <- list()
if (options$contingencyCoefficient) {
row          <- .crossTabNominalMatrixToRow(analysisContainer, row, counts.matrix, type = "ContCoef", ready, row.rownames[g])
}
if (options$phiAndCramersV) {
row          <- .crossTabNominalMatrixToRow(analysisContainer, row, counts.matrix, type = "PhiCoef", ready, row.rownames[g])
row          <- .crossTabNominalMatrixToRow(analysisContainer, row, counts.matrix, type = "CramerV", ready, row.rownames[g])
}
if (options$lambda) {
row[["type[LambdaR]"]] <- gettextf("Lambda ( %i dependent)", options$rows)
row[["type[LambdaC]"]] <- gettextf("Lambda ( %i dependent)", options$columns)
if (ready) { #The following looks like it could be a function instead of ctrl+c/+v...
N                    <- sum(counts.matrix)
E1R                  <- N - max(rowSums(counts.matrix))
E2R                  <- sum(apply(counts.matrix,2, function (x) sum(x) - max(x) ))
lambdaR              <- (E1 - E2)/E1
if(is.na(lambdaR))
lambdaR            <- NaN
E1C                  <- N - max(colSums(counts.matrix))
E2C                  <- sum(apply(counts.matrix, 1, function (x) sum(x) - max(x) ))
lambdaC              <- (E1 - E2)/E1
if (is.na(lambdaC))
lambdaC            <- NaN
row[["value[LambdaR]"]] <- lambdaR
row[["value[LambdaC]"]] <- lambdaC
} else {
row[["value[LambdaR]"]] <- "."
row[["value[LambdaC]"]] <- "."
}
}
nominal.rows[[length(nominal.rows) + 1]] <- .crossTabLayerNames(row, group)
}
return(list(rows = nominal.rows, rownames = row.rownames))
}
.crossTabGammaRows <- function(analysisContainer, var.name, groupList, options, ready) {
ordinal.rows   <- list()
group.matrices <- groupList$group.matrices
groups         <- groupList$groups
row.rownames   <- .crossTabRowName(groups)
for (g in seq_along(group.matrices)) {
counts.matrix <- group.matrices[[g]]
if (!is.null(groups))  group <- groups[[g]]
else                   group <- NULL
row <- list()
if(ready) {
chi.result <- try({ chi.result <- vcdExtra::GKgamma(counts.matrix) }) # in for a penny in for a dime I guess
if (isTryError(chi.result)) {
row[["value[gammaCoef]"]] <- NaN
} else {
row[["value[gammaCoef]"]] <- chi.result$gamma
row[["Sigma[gammaCoef]"]] <- chi.result$sigma
row[["low[gammaCoef]"]]   <- chi.result$CI[1]
row[["up[gammaCoef]"]]    <- chi.result$CI[2]
}
}
else {
row[["value[gammaCoef]"]] <- "."
row[["Sigma[gammaCoef]"]] <- "."
row[["low[gammaCoef]"]]   <- "."
row[["up[gammaCoef]"]]    <- "."
}
ordinal.rows[[length(ordinal.rows) + 1]] <- .crossTabLayerNames(row, group)
}
return(list(rows = ordinal.rows, rownames = row.rownames))
}
.crossTabKendallsTauRows <- function(analysisContainer, var.name, groupList, options, ready) {
kendalls.rows  <- list()
group.matrices <- groupList$group.matrices
groups         <- groupList$groups
row.rownames   <- .crossTabRowName(groups)
for (g in seq_along(group.matrices)) {
counts.matrix <- group.matrices[[g]]
if (!is.null(groups)) group <- groups[[g]]
else                  group <- NULL
row <- list()
if (ready) {
chi.result <- try({
count.dat  <- stats::ftable(counts.matrix)
count.dat  <- as.data.frame(count.dat)
Var1       <- rep(count.dat[,1],times = count.dat$Freq)
Var2       <- rep(count.dat[,2],times = count.dat$Freq)
chi.result <- stats::cor.test(as.numeric(Var1),
as.numeric(Var2),
method = "kendall")
})
if (isTryError(chi.result))
row[["value[kTauB]"]] <- NaN
else {
row[["value[kTauB]"]]     <- unname(chi.result$estimate)
row[["p[kTauB]"]]         <- chi.result$p.value
if (options$VovkSellkeMPR)  row[["MPR[kTauB]"]]       <- .VovkSellkeMPR(row[["p[kTauB]"]])
row[["statistic[kTauB]"]] <- unname(chi.result$statistic)
}
} else {
row[["value[kTauB]"]]     <- "."
row[["p[kTauB]"]]         <- "."
if (options$VovkSellkeMPR)    row[["MPR[kTauB]"]]       <- "."
row[["statistic[kTauB]"]] <- "."
}
kendalls.rows[[length(kendalls.rows) + 1]] <- .crossTabLayerNames(row, group)
}
return(list(rows = kendalls.rows, rownames = row.rownames))
}
View(ContingencyTables)
VovkSellkeMPR
library("VovkSellkeMPR")
ResultsReli <- matrix(c(rep(3,6),
), ncol=6, byrow = T)
ResultsReli <- matrix(c(rep(3,6)),
), ncol=6, byrow = T)
ResultsReli <- matrix(c(rep(3,6)),
ncol=6, byrow = T)
colnames(ResultsReli) <- c('By Hand', 'JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cr' )
knitr::kable(head(ResultsDesc, 20), caption = "Result Overview Reliability Analysis", booktabs = T)
ResultsReli <- matrix(c(rep(3,6)),
ncol=6, byrow = T)
colnames(ResultsReli) <- c('By Hand', 'JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cr' )
knitr::kable(head(ResultsReli, 20), caption = "Result Overview Reliability Analysis", booktabs = T)
ResultsReli <- matrix(c(rep(3,6)),
ncol=6, byrow = T)
colnames(ResultsReli) <- c('By Hand', 'JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cronbachs \${alpha}\$' )
ResultsReli <- matrix(c(rep(3,6)),
ncol=6, byrow = T)
colnames(ResultsReli) <- c('By Hand', 'JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cronbachs ${alpha}$' )
knitr::kable(head(ResultsReli, 20), caption = "Result Overview Reliability Analysis", booktabs = T)
ResultsReli <- matrix(c(rep(3,6)),
ncol=6, byrow = T)
colnames(ResultsReli) <- c('By Hand', 'JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cronbachs $\alpha$' )
knitr::kable(head(ResultsReli, 20), caption = "Result Overview Reliability Analysis", booktabs = T)
ResultsReli <- matrix(c(rep(3,6)),
ncol=6, byrow = T)
colnames(ResultsReli) <- c('By Hand', 'JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cronbachs $\\alpha$' )
knitr::kable(head(ResultsReli, 20), caption = "Result Overview Reliability Analysis", booktabs = T)
ResultsReli <- matrix(c(rep(3,5)),
ncol=6, byrow = T)
colnames(ResultsReli) <- c('JASP', 'SPSS', 'SAS', 'Minitab', 'R')
ResultsReli <- matrix(c(rep(3,5)),
ncol=5, byrow = T)
colnames(ResultsReli) <- c('JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cronbachs $\\alpha$' )
knitr::kable(head(ResultsReli, 20), caption = "Result Overview Reliability Analysis", booktabs = T)
reli.data <- read.csv("Datasets/Reliability.csv", sep=",")
library(dplyr)
?select
# library(psych)
Questions <- select(reli.data, 1, 4, 5, 6, 7, 8, 10)
Questions
# library(psych)
QuestionSelection <- select(reli.data, 1, 4, 5, 6, 7, 8, 10)
alpha(QuestionSelection)
psych::alpha(QuestionSelection)
# library(psych)
QuestionSelection <- select(reli.data, 1, 4, 5, 6, 7, 8, 10)
psych::alpha(QuestionSelection)
# library(psych)
QuestionSelection <- select(reli.data, 1, 4, 5, 6, 7, 8, 10)
psych::alpha(QuestionSelection)
# library(psych)
QuestionSelection <- c(reli.data$ï..Question_01, reli.data$Question_04, reli.data$Question_05, reli.data$Question_06,
reli.data$Question_07, reli.data$Question_08, reli.data$Question_1-)
# library(psych)
QuestionSelection <- c(reli.data$ï..Question_01, reli.data$Question_04, reli.data$Question_05, reli.data$Question_06,
reli.data$Question_07, reli.data$Question_08, reli.data$Question_10)
psych::alpha(QuestionSelection)
# library(psych)
QuestionSelection <- reli.data[1]
QuestionSelection
# library(psych)
QuestionSelection <- reli.data[c(1,4,5,6,7,8,10)]
QuestionSelection
# library(psych)
QuestionSelection <- reli.data[c(1,4,5,6,7,8,10)]
psych::alpha(QuestionSelection)
analysis <- psych::alpha(QuestionSelection)
# library(psych)
QuestionSelection <- reli.data[c(1,4,5,6,7,8,10)]
analysis <- psych::alpha(QuestionSelection)
analysis
analysis$total$raw_alpha
knitr::include_graphics('Screenshots/Reliability/ReliabilityJASP.PNG')
knitr::include_graphics('Screenshots/Reliability/ReliabilitySPSS2.PNG')
knitr::include_graphics('Screenshots/Reliability/ReliabilitySAS.PNG')
knitr::include_graphics('Screenshots/Reliability/ReliabilityMinitab2.PNG')
ResultsReli <- matrix(c(0.7574, 0.758, 0,7574, 0.7574, 0.7574),
ncol=5, byrow = T)
colnames(ResultsReli) <- c('JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cronbachs $\\alpha$' )
ResultsReli <- matrix(c(0.7574, 0.758, 0.7574, 0.7574, 0.7574),
ncol=5, byrow = T)
colnames(ResultsReli) <- c('JASP', 'SPSS', 'SAS', 'Minitab', 'R')
rownames(ResultsReli) <- c('Cronbachs $\\alpha$' )
knitr::kable(head(ResultsReli, 20), caption = "Result Overview Reliability Analysis", booktabs = T)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "")
?kable()
?include_graphics
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown', 'float'
), 'packages.bib')
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "")
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
knitr::opts_chunk$set(fig.pos = "!H", out.extra = "")
plot(rnorm(100,0,1))
hist(rnorm(100,0,1))
hist(rnorm(100,0,1))
hist(rnorm(100,0,1))
barplot(rnorm(100,0,1))
barplot(rnorm(100,0,1))
hist(rnorm(100,0,1))
hist(rnorm(100,0,10))
hist(rnorm(100,0,10))
hist(rnorm(1000,0,10))
hist(rnorm(1000,0,10))
hist(rnorm(1000,0,10))
hist(rnorm(1000,0,10))
x <- rnorm(1000,0,10)
hist(x)
x <- x + rnorm(1000,0,10)
hist(x)
x <- rnorm(1000,0,10)
x <- x + rnorm(1000,0,10)
hist(x)
x <- rnorm(1000,0,10)
x <- x + rnorm(1000,0,10)
hist(x)
x <- rnorm(1000,0,10)
x <- x + rnorm(1000,0,10)
x <- rnorm(1000,0,10)
x <- x + rnorm(1000,0,10)
hist(x)
x <- rnorm(1000,0,10)
x <- x + rnorm(1000,0,10)
hist(x)
x <- rnorm(1000,0,10)
x <- x + rnorm(1000,0,10)
hist(x)
x <- rnorm(1000,0,10)
hist(x)
y <- x + rnorm(1000,0,10)
hist(y)
x <- rnorm(1000,0,10)
hist(x)
y <- x + rnorm(1000,0,10)
hist(y)
x <- rnorm(1000,0,10)
hist(x)
y <- x + rnorm(1000,0,10)
hist(y)
x <- rnorm(1000,0,10)
hist(x)
y <- x + rnorm(1000,0,10)
hist(y)
x <- rnorm(1000,0,10)
hist(x)
y <- x + rnorm(1000,0,10)
hist(y)
z <- y + rnorm(1000,0,10)
hist(z)
shapiro.test(x)
shapiro.test(y)
shapiro.test(z)
x <- rnorm(1000,0,10)
for(i in 1:100)
x <- x + rnorm(1000,0,10)
x <- rnorm(1000,0,10)
for(i in 1:100){
x <- x + rnorm(1000,0,10)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,100)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,10)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,10)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,10)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,10)
for(i in 1:100){
x <- x + rnorm(1000,0,100)
}
shapiro.test(x)
hist(x)
x <- rnorm(1000,0,10)
x <- x + rnorm(1000,0,100)
shapiro.test(x)
hist(x)
x <- rnorm(10,0,10)
shapiro.test(x)
hist(x)
shapiro.test(x)
x <- x + rnorm(1000,0,100)
shapiro.test(x)
hist(x)
x <- rnorm(10,0,10)
x <- x + rnorm(10,0,100)
shapiro.test(x)
hist(x)
x <- rnorm(40,0,10)
x <- x + rnorm(40,0,100)
shapiro.test(x)
hist(x)
?aov
reli.data <- read.csv("Datasets/Reliability.csv", sep=",")
# library(psych)
QuestionSelection <- reli.data[c(1,4,5,6,7,8,10)]
analysis <- psych::alpha(QuestionSelection)
analysis
analysis$total$raw_alpha
analysis <- ?psych::alpha(QuestionSelection)
?psych::alpha(QuestionSelection)
analysis <- ?psych::alpha(QuestionSelection, cumulative = T)
analysis
analysis <- psych::alpha(QuestionSelection, cumulative = T)
analysis
library(bookdown)
library(bookdown)
reli.data <- read.csv("Datasets/Reliability.csv", sep=",")
# library(psych)
QuestionSelection <- reli.data[c(1,4,5,6,7,8,10)]
analysis <- psych::alpha(QuestionSelection, cumulative = T)
analysis
analysis$total$raw_alpha
analysis$scores
analysis$total
analysis
analysis$total
analysis$total$raw_alpha
analysis$item.stats
analysis$alpha.drop
install.packages('bookdown')
